این کد یک درخت جستجوى دوتایی (BST) ساده با عملیات افزودن و جستجو را پیاده‌سازی می‌کند.
هدرها
دو هدر stdio.h و stdlib.h شامل توابع استاندارد ورود/خروج و کارایی‌های عمومی مانند تخصیص حافظه هستند.
ساختار گره
ساختار struct TreeNode یک گره در درخت را نشان می‌دهد.
int data: مقدار عددى را که گره نگه می‌دارد ذخیره می‌کند.
struct TreeNode* left: اشاره‌گر به گره فرزند چپ.
struct TreeNode* right: اشاره‌گر به گره فرزند راست.
توابع
createNode(int key): یک گره جدید با کلید داده‌شده ایجاد می‌کند.
حافظه را برای گره با استفاده از malloc تخصیص می‌دهد.
داده گره را به مقدار کلید تنظیم می‌کند.
اشاره‌گرهای چپ و راست آن را به NULL مقداردهی اولیه می‌کند.
گره جدید ایجادشده را برمی‌گرداند.
insert(struct TreeNode* root, int key): یک گره جدید با کلید داده‌شده را به درخت وارد می‌کند.
درخت را به‌صورت بازگشتى پیمایش می‌کند تا موقعیت مناسب برای گره جدید را بر اساس خاصیت BST پیدا کند (ارقام کوچک‌تر از گره فعلى به زیردرخت چپ می‌روند، ارقام بزرگتر به زیردرخت راست می‌روند).
اگر موقعیت مناسبى پیدا شد (زیردرخت خالى)، با استفاده از createNode یک گره جدید ایجاد می‌کند و آن را وارد می‌کند.
ریشه درخت را (یا ریشه اصلی یا گره جدید ایجادشده) برمی‌گرداند.
search(struct TreeNode* root, int key): در درخت به دنبال گره‌اى با کلید داده‌شده می‌گردد.
درخت را به‌صورت بازگشتى پیمایش می‌کند و کلید را با داده هر گره مقایسه می‌کند.
اگر کلید پیدا شد، مقدار 1 (نشان‌دهنده موفقیت) را برمی‌گرداند.
اگر کلید پیدا نشد، مقدار 0 (نشان‌دهنده شکست) را برمی‌گرداند.
تابع اصلی
درخت خالى را با root = NULL مقداردهی اولیه می‌کند.
کاربر را به وارد کردن یک لیست از اعداد جداشده با کاما دعوت می‌کند.
ورودى را با استفاده از fgets می‌خواند و آن را با استفاده از strtok به اعداد جداگانه تقسیم می‌کند تا اعداد را استخراج کند.
هر عدد را با استفاده از تابع insert وارد درخت می‌کند.
کاربر را به وارد کردن یک عدد براى جستجو دعوت می‌کند.
عدد جستجو را با استفاده از scanf می‌خواند.
تابع search را براى یافتن عدد در درخت فراخوانی می‌کند.
پیامى را نشان می‌دهد که نشان مى‌دهد عدد یافت شد یا خیر.
نقاط کلیدی
این کد یک BST ساده با عملیات افزودن و جستجو را پیاده‌سازی می‌کند.
آن از خاصیت BST پیروى مى‌کند: مقادیر کوچک‌تر از گره والد در زیردرخت چپ ذخیره مى‌شوند، در حالی که مقادیر بزرگتر در زیردرخت راست ذخیره مى‌شوند.
توابع insert و search بازگشتى هستند، به این معنا که خود را براى پیمایش درخت فراخوانی می‌کنند.
کد از توابع ورود/خروج استاندارد C براى تعامل با کاربر استفاده مى‌کند.
مثال
فرض کنید کاربر لیست زیر را وارد مى‌کند:
1, 3, 5, 7, 9 
این کد درخت زیر را ایجاد خواهد کرد:
1 / \ 3 5 / \ 7 9 
اگر کاربر عدد 3 را براى جستجو وارد کند، کد پیام زیر را نشان خواهد داد:
3 found in the tree. 
اگر کاربر عدد 2 را براى جستجو وارد کند، کد پیام زیر را نشان خواهد داد:
2 not found in the tree.
